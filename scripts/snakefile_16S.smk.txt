configfile: "config.yaml"

from os import listdir
from os.path import isfile, join
import os
import re
import argparse
import sys
from python_scripts import supplementary_scripts

folder_path = config["inputdir"]

# Retrieve directory names in the specified folder

# Get the classifier name
classifier_name = config["classifier"].split("/")[-1][:-4]

# Make the outputdir
outputdir = config["inputdir"] + "output/"

minimal_depth=20000


rule all:
    input:
        outputdir + "reports/" + config["naming_convention"] + ".zip"
        # outputdir+ "Visualization_qzv/" + config["naming_convention"] + "_trimmed_demux_seqs.qzv"
        # outputdir + "reports/Qiime_report.txt"#,
        # outputdir+ "reports/time.png"
        # outputdir + "Visualization_qzv/" + config["naming_convention"] + "_trimmed_demux_seqs.qzv",
        # outputdir + "Visualization_qzv/" + config["naming_convention"] + "_representative_sequences.qzv",
        # outputdir + "Visualization_qzv/" + config["naming_convention"] + "_table.qzv",
        # outputdir + "Visualization_qzv/" + config["naming_convention"] + "_denoising_stats.qzv",
        # outputdir + "Visualization_qzv/" + config["naming_convention"] + "_" + classifier_name + ".qzv",
        #
        # outputdir + "export/" + config["naming_convention"] + "_dna-sequences.fasta",
        # outputdir + "export/" + config["naming_convention"] + "_feature-table.biom",
        # outputdir + "export/" + config["naming_convention"] + "_tree.nwk",
        # outputdir + "export/" + config["naming_convention"] + "_taxonomy.tsv"

rule trimmed_demux_summary:
    input:
        config["inputdir"] + config["start_file"]
    output:
        outputdir + "Visualization_qzv/" + config["naming_convention"] + "_trimmed_demux_seqs.qzv"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    benchmark:
        outputdir + "benchmarks/visualize_trimmed_demux.txt"
    message:
        "@#"
        "Trimmed demux summary:   "
        "qiime demux summarize "
        "   --i-data {input} "
        "   --o-visualization {output}"
        "@#"
    shell:
        "sbatch bash_scripts/vis/demux_summary.sh {input} {output};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output}"

rule choose_parameters_1:
    input:
        rules.trimmed_demux_summary.output
    output:
        outputdir + "pause_files/forward_reverse_chosen.txt"
    run:
        table_vis = str(rules.choose_parameters.input.vis_tab_seq)
        continue_bool = supplementary_scripts.get_answer()

        forward = supplementary_scripts.get_forward()

        reverse = supplementary_scripts.get_reverse()

        directory = f"{outputdir}pause_files/"
        if not os.path.exists(directory):
            os.makedirs(directory)

        # Create the file
        file_path = os.path.join(directory,"forward_reverse_chosen.txt")
        with open(file_path,'w') as f:
            f.write(f"{forward}\n")
            f.write(f"{reverse}")

rule denoising_paired:
    input:
        start_file = config["inputdir"] + config["start_file"],
        continue_sign = rules.choose_parameters_1.output
    output:
        representative = outputdir + "Artifacts_qza/" + config["naming_convention"] + "_representative_sequences.qza",
        table = outputdir + "Artifacts_qza/" + config["naming_convention"] + "_table.qza",
        denoising_stats = outputdir + "Artifacts_qza/" + config["naming_convention"] + "_denoising_stats.qza"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    params:
        p_trim_left = 5,
        p_trim_right = 5,
        #threads = 8
    benchmark:
        outputdir + "benchmarks/denoising_paired.txt"
    message:
        "@#"
        "Denoising paired end:  "
        "qiime dada2 denoise-paired "
        "   --i-demultiplexed-seqs {input.start_file} "
        "   --p-trim-left-f {params.p_trim_left} "
        "   --p-trim-left-r {params.p_trim_right} "
        "   --p-trunc-len-f 200 "
        "   --p-trunc-len-r 190 "
        "   --o-table  {output.table} "
        "   --o-representative-sequences {output.representative} "
        "   --o-denoising-stats {output.denoising_stats} "
        "   --p-n-threads 16"
        "@#"
    shell:
        "sbatch bash_scripts/calc/denoise_paired.sh {input.start_file} {params.p_trim_left} {params.p_trim_right} {output.table} {output.representative} {output.denoising_stats} {input.continue_sign};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output.representative} {output.table} {output.denoising_stats};"
        "cat {input.continue_sign}"

rule visualize_denoising_stats:
    input:
        rules.denoising_paired.output.denoising_stats
    output:
        outputdir + "Visualization_qzv/" + config["naming_convention"] + "_denoising_stats.qzv"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    benchmark:
        outputdir + "benchmarks/visualize_denoising_stats.txt"
    message:
        "@#"
        "Visualizing denoising stats:   "
        "qiime metadata tabulate "
        "   --m-input-file {input} "
        "   --o-visualization {output}"
        "@#"
    shell:
        "sbatch bash_scripts/vis/metadata_tab.sh {input} {output};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output};"

rule visualize_table:
    input:
        table = rules.denoising_paired.output.table
    output:
        outputdir + "Visualization_qzv/" + config["naming_convention"] + "_table.qzv"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    params:
        metadata = config["inputdir"] + "input/" + config["naming_convention"] + "@metadata.txt"
    benchmark:
        outputdir + "benchmarks/visualize_table.txt"
    message:
        "@#"
        "Visualizing table:   "
        "qiime feature-table summarize "
        "   --i-table {input.table} "
        "   --m-sample-metadata-file {params.metadata} "
        "   --o-visualization {output}"
        "@#"
    shell:
        "sbatch bash_scripts/vis/feature_table_summary.sh {input.table} {params.metadata} {output};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output};"

rule visualize_representative_sequences:
    input:
        rules.denoising_paired.output.representative
    output:
        outputdir + "Visualization_qzv/" + config["naming_convention"] + "_representative_sequences.qzv"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    benchmark:
        outputdir + "benchmarks/visualize_representative_sequences.txt"
    message:
        "@#"
        "Visualizing representative sequences:   "
        "qiime feature-table tabulate-seqs "
        "   --i-data {input} "
        "   --o-visualization {output}"
        "@#"
    shell:
        "sbatch bash_scripts/vis/feature_table_tab.sh {input} {output};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output};"


rule choose_parameters:
    input:
        vis_rep_seq = rules.visualize_representative_sequences.output,
        vis_tab_seq = rules.visualize_table.output,
        vis_stats_seq = rules.visualize_denoising_stats.output
    output:
        outputdir + "pause_files/correct_denoise_chosen.txt"
    run:

        table_vis = str(rules.choose_parameters.input.vis_tab_seq)
        continue_bool = supplementary_scripts.get_answer()

        if continue_bool:
            global minimal_depth
            minimal_depth = supplementary_scripts.retrieve_lowest_information(table_vis)

            directory = f"{outputdir}pause_files/"
            if not os.path.exists(directory):
                os.makedirs(directory)

            # Create the file
            file_path = os.path.join(directory,"correct_denoise_chosen.txt")
            with open(file_path,'w') as f:
                f.write(f"{minimal_depth}")

            # This will create an empty file
            print("File created successfully:",file_path)

        else:
            vis_rep = str(rules.choose_parameters.input.vis_rep_seq)
            vis_tab = str(rules.choose_parameters.input.vis_tab_seq)
            vis_stats = str(rules.choose_parameters.input.vis_stats_seq)

            rep = str(rules.visualize_representative_sequences.input.input)
            tab = str(rules.visualize_table.input.input)
            stats = str(rules.visualize_denoising_stats.input.input)

            os.remove(vis_rep)
            os.remove(vis_tab)
            os.remove(vis_stats)
            os.remove(rep)
            os.remove(tab)
            os.remove(stats)

rule mafft_alignment:
    input:
        denoise_repr = rules.denoising_paired.output.representative,
        start_signal = rules.choose_parameters.output
    output:
        outputdir + "Artifacts_qza/" + config["naming_convention"] + "_aligned-rep-seqs.qza"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    params:
        threads = 16
    benchmark:
        outputdir + "benchmarks/Mafft_alignment.txt"
    message:
        "@#"
        "Multiple sequence alignment met Mafft:   "
        "qiime alignment mafft "
        "   --i-sequences {input.denoise_repr} "
        "   --o-alignment {output} "
        "   --p-n-threads {params.threads} "
        "@#"
    shell:
        "sbatch bash_scripts/calc/mafft_alignment.sh {input.denoise_repr} {output} {params.threads};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output};"

rule masking_alignment:
    input:
        rules.mafft_alignment.output
    output:
        outputdir + "Artifacts_qza/" + config["naming_convention"] + "_masked_aligned-rep-seqs.qza"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    benchmark:
        outputdir + "benchmarks/Masking_alignment.txt"
    message:
        "@#"
        "Masking MSA:   "
        "qiime alignment mask "
        "   --i-alignment {input} "
        "   --o-masked-alignment {output}"
        "@#"
    shell:
        "sbatch bash_scripts/calc/alignment_mask.sh {input} {output};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output};"

rule Phylogenetic_Fasttree:
    input:
        rules.masking_alignment.output
    output:
        outputdir + "Artifacts_qza/" + config["naming_convention"] + "_unrooted-tree.qza"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    params:
        threads = 16
    benchmark:
        outputdir + "benchmarks/Phylogenetic_Fasttree.txt"
    message:
        "@#"
        "Making phylogenetic tree:   "
        "qiime phylogeny fasttree "
        "   --i-alignment {input} "
        "   --o-tree {output} "
        "   --p-n-threads {params.threads}"
        "@#"
    shell:
        "sbatch bash_scripts/calc/phylo_fasttree.sh {input} {output} {params.threads};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output};"

rule midpoint_root:
    input:
        rules.Phylogenetic_Fasttree.output
    output:
        outputdir + "Artifacts_qza/" + config["naming_convention"] + "_rooted-tree.qza"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    benchmark:
        outputdir + "benchmarks/midpoint_root.txt"
    message:
        "@#"
        "Determining midpoint:    "
        "qiime phylogeny midpoint-root "
        "   --i-tree {input} "
        "   --o-rooted-tree {output}"
        "@#"
    shell:
        "sbatch bash_scripts/calc/phylotree_midpoint.sh {input} {output};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output};"

rule classifying_reads:
    input:
        denoise_repr = rules.denoising_paired.output.representative,
        start_signal = rules.choose_parameters.output
    output:
        outputdir + "Artifacts_qza/" + config["naming_convention"] + "_" + classifier_name + ".qza"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    params:
        threads = 8,
        batch_size = 200
    benchmark:
        outputdir + "benchmarks/Classification.txt"
    message:
        "@#"
        "Classify reads:   "
        "qiime feature-classifier classify-sklearn "
        "   --i-classifier {config[classifier]} "
        "   --i-reads {input.denoise_repr} "
        "   --o-classification {output} "
        "   --p-n-jobs {params.threads} "
        "   --p-reads-per-batch {params.batch_size}"
        "@#"
    shell:
        "sbatch bash_scripts/calc/classify_sklearn.sh {config[classifier]} {input.denoise_repr} {output} {params.threads} {params.batch_size};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output};"

rule visualize_classification:
    input:
        rules.classifying_reads.output
    output:
        outputdir + "Visualization_qzv/" + config["naming_convention"] + "_" + classifier_name + ".qzv"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    benchmark:
        outputdir + "benchmarks/visualize_classification.txt"
    message:
        "@#"
        "Visualize classification:   "
        "qiime metadata tabulate "
        "   --m-input-file {input} "
        "   --o-visualization {output}"
        "@#"
    shell:
        "sbatch bash_scripts/vis/metadata_tab.sh {input} {output};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output};"


rule export_representative:
    input:
        denoise_repr = rules.denoising_paired.output.representative,
        start_signal = rules.choose_parameters.output
    output:
        outputdir + "export/" + config["naming_convention"] + "_dna-sequences.fasta"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    params:
        first_output = outputdir +"export/dna-sequences.fasta"
    benchmark:
        outputdir + "benchmarks/export_representative.txt"
    message:
        "@#"
        "Exporting respresentative sequences:   "
        "qiime tools export "
        "   --input-path {input.denoise_repr} "
        "   --output-path {outputdir}export/"
        "@#"
    shell:
        "sbatch bash_scripts/calc/export_files.sh {input.denoise_repr} {outputdir}export/;"
        "python3 {config[tooldir]}python_scripts/wait_file.py {params.first_output};"
        "mv {params.first_output} {output}"

rule export_table:
    input:
        denoise_rp = rules.denoising_paired.output.table,
        start_signal = rules.choose_parameters.output
    output:
         outputdir + "export/" + config["naming_convention"] + "_feature-table.biom"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    params:
        first_output = outputdir + "export/feature-table.biom"
    benchmark:
        outputdir + "benchmarks/export_table.txt"
    message:
        "@#"
        "Exporting table:   "
        "qiime tools export "
        "   --input-path {input.denoise_rp} "
        "   --output-path {outputdir}export/"
        "@#"
    shell:
        "sbatch bash_scripts/calc/export_files.sh {input.denoise_rp} {outputdir}export/;"
        "python3 {config[tooldir]}python_scripts/wait_file.py {params.first_output};"
        "mv {params.first_output} {output}"

rule export_rooted_tree:
    input:
        rules.midpoint_root.output
    output:
        outputdir + "export/" + config["naming_convention"] + "_tree.nwk"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    params:
        first_output = outputdir + "export/tree.nwk"
    benchmark:
        outputdir + "benchmarks/export_rooted_tree.txt"
    message:
        "@#"
        "Exporting rooted tree:   "
        "qiime tools export "
        "   --input-path {input} "
        "   --output-path {outputdir}export/"
        "@#"
    shell:
        "sbatch bash_scripts/calc/export_files.sh {input} {outputdir}export/;"
        "python3 {config[tooldir]}python_scripts/wait_file.py {params.first_output};"
        "mv {params.first_output} {output}"

rule export_classified:
    input:
        rules.classifying_reads.output
    output:
        outputdir + "export/" + config["naming_convention"] + "_taxonomy.tsv"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    params:
        first_output = outputdir + "export/taxonomy.tsv"
    benchmark:
        outputdir + "benchmarks/export_classified.txt"
    message:
        "@#"
        "Exporting classifications: "
        "qiime tools export "
        "   --input-path {input} "
        "   --output-path {outputdir}export/"
        "@#"
    shell:
        "sbatch bash_scripts/calc/export_files.sh {input} {outputdir}export/;"
        "python3 {config[tooldir]}python_scripts/wait_file.py {params.first_output};"
        "mv {params.first_output} {output}"

rule alpha_rarefaction:
    input:
        rooted_tree = rules.midpoint_root.output,
        table_denoise = rules.denoising_paired.output.table,
        start_signal = rules.choose_parameters.output,
        min_dept_file = rules.choose_parameters.output
    output:
        outputdir + "Visualization_qzv/" + config["naming_convention"] + "_alpha-rarefaction.qzv"
    params:
        metadata = config["inputdir"] + "input/" + config["naming_convention"] + "@metadata.txt"
    benchmark:
        outputdir + "benchmarks/alpha_rarefaction.txt"
    message:
        "@#"
        "Retrieving_alpha_rarefaction:  "
        "qiime diversity alpha-rarefaction  "
        "   --i-table {input.table_denoise} "
        "   --i-phylogeny {input.rooted_tree} "
        "   --p-max-depth minimal_depth "
        "   --m-metadata-file {params.metadata} "
        "   --o-visualization {output}"
        "@#"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    shell:
        "bash_scripts/vis/alpha_rarefaction.sh {input.table_denoise} {input.rooted_tree} {input.min_dept_file} {params.metadata} {output};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output}"

rule Taxonomy_analysis:
    input:
        taxa = rules.classifying_reads.output,
        table = rules.denoising_paired.output.table,
        start_signal = rules.choose_parameters.output
    output:
        outputdir + "Visualization_qzv/" + config["naming_convention"] + "_taxonomy_barplot.qzv"
    conda:
        config["condaenvs"] + config["qiime_v2"]
    message:
        "@#"
        "qiime taxa barplot "
        "   --i-table {input.table} "
        "   --i-taxonomy {input.taxa}   "
        "   --m-metadata-file {params.metadata} "
        "   --o-visualization {output}"
        "@#"
    params:
        metadata=config["inputdir"] + "input/" + config["naming_convention"] + "@metadata.txt"
    shell:
        "sbatch bash_scripts/vis/taxonomy_barplot.sh {input.table} {input.taxa} {params.metadata} {output};"
        "python3 {config[tooldir]}python_scripts/wait_file.py {output}"

rule return_zipped_results:
    input:
        table = rules.denoising_paired.output.table,
        representative = rules.denoising_paired.output.representative,
        rooted = rules.midpoint_root.output,
        taxonomy = rules.classifying_reads.output,
        alpha = rules.alpha_rarefaction.output,
        vis_denoise = rules.visualize_denoising_stats.output,
        start_signal = rules.choose_parameters.output,

        export_rooted_tree= rules.export_rooted_tree.output,
        export_representative= rules.export_representative.output,
        export_table= rules.export_table.output,
        export_classify= rules.export_classified.output,
        vis_trimmed= rules.trimmed_demux_summary.output,
        vis_repr= rules.visualize_representative_sequences.output,
        vis_table= rules.visualize_table.output,
        vis_classify= rules.visualize_classification.output,
        taxonomy_analysis= rules.Taxonomy_analysis.output

    output:
        outputdir + "reports/"+ config["naming_convention"] + ".zip"
    params:
        metadata = config["inputdir"] + "input/" + config["naming_convention"] + "@metadata.txt",
        zip_folder = outputdir + "reports/"+ config["naming_convention"]
    shell:
        "mkdir {params.zip_folder};"
        "cp {input.table} {params.zip_folder};"
        "cp {input.representative} {params.zip_folder};"
        "cp {input.rooted} {params.zip_folder};"
        "cp {input.taxonomy} {params.zip_folder};"
        "cp {input.alpha} {params.zip_folder};"
        "cp {params.metadata} {params.zip_folder};"
        "cp {input.vis_denoise} {params.zip_folder};"
        "mkdir {outputdir}slurm_output/;"
        "mv *.out {outputdir}slurm_output/;"
        "mv Pipeline_execution.txt {outputdir}reports/;"
        "python3 python_scripts/snakemake_report.py --inputdir={outputdir};"
        "cp {outputdir}reports/Qiime_report.txt {params.zip_folder};"
        "zip -r {output} {params.zip_folder}"

# Works... R
rule make_reports:
    input:
        zipped = rules.return_zipped_results.output
    output:
        report = outputdir + "reports/Qiime_report.txt",
        # time = outputdir + "reports/time.png"
    params:
        input_file = outputdir + "reports/time.csv"
    conda:
        config["condaenvs"] + "R.yaml"
    shell:
        "Rscript r_scripts/Visualize_time.R {params.input_file} {output.time}"

